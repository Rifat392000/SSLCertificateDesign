#Bash
#!/bin/bash

# **1. Setting up the directory structure:**

mkdir -p {root-ca,sub-ca,server}/{private,certs,index,serial,pem,crl,csr}
mkdir generated

# Create empty files to track certificate issuance and serial numbers:
touch root-ca/index/index
touch sub-ca/index/index

# Generate random numbers for unique certificate serial numbers:
openssl rand -hex 16 > root-ca/serial/serial
openssl rand -hex 16 > sub-ca/serial/serial

# Secure private key directories with read/write/execute permissions for owner only:
chmod -v 700 {root-ca,sub-ca,server}/private

# Copy configuration files for Root CA and Sub CA:
cp root-ca.conf root-ca
cp sub-ca.conf sub-ca

# **2. Generating Root CA and Sub CA Certificates:**

# Generate a strong encryption key (4096 bits) for the Root CA:
openssl genrsa -aes256 -out root-ca/private/ca.key 4096

# Generate a strong encryption key (4096 bits) for the Sub CA:
openssl genrsa -aes256 -out sub-ca/private/sub-ca.key 4096

# Generate a strong encryption key (2048 bits) for the server:
openssl genrsa -out server/private/server.key 2048

# Create a self-signed Root CA certificate valid for 20 years (7305 days):
openssl req -config root-ca/root-ca.conf -key root-ca/private/ca.key -new -x509 -days 7305 -sha256 -extensions v3_ca -out root-ca/certs/ca.crt

# Create a certificate signing request (CSR) for the Sub CA:
openssl req -config sub-ca/sub-ca.conf -new -key sub-ca/private/sub-ca.key -sha256 -out sub-ca/csr/sub-ca.csr

# Sign the Sub CA CSR using the Root CA, creating a valid Sub CA certificate for one year (365 days):
openssl ca -config root-ca/root-ca.conf -extensions v3_intermediate_ca -days 365 -notext -in sub-ca/csr/sub-ca.csr -out sub-ca/certs/sub-ca.crt

# **3. Generating Server SSL Certificate:**

# Create a CSR for the server:
openssl req -key server/private/server.key -new -sha256 -out server/csr/server.csr

# Sign the server CSR using the Sub CA, creating a server certificate valid for one year (365 days):
openssl ca -config sub-ca/sub-ca.conf -extensions server_cert -days 365 -notext -in server/csr/server.csr -out server/certs/server.crt

# Create a PKCS#12 (PFX) bundle containing the server's certificate and private key for easy deployment:
openssl pkcs12 -inkey server/private/server.key -in server/certs/server.crt -export -out server/certs/server.pfx

# **4. Organizing generated files:**

# Copy the Root CA, Sub CA, and server certificates to the "generated" directory for easy access:
cp root-ca/certs/ca.crt generated
cp sub-ca/certs/sub-ca.crt generated
cp server/certs/server.crt generated

# Copy the server's private key to the "generated" directory:
cp server/private/server.key generated

# Copy the server's PFX bundle to the "generated" directory:
cp server/certs/server.pfx generated

# Move to the "generated" directory and combine the server, Sub CA, and Root CA certificates into a single file for easier installation:
cd generated
cat server.crt sub-ca.crt ca.crt > chained.crt

# This script has now generated all the necessary certificates and organized them for easy deployment.
